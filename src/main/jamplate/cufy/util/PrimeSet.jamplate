#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean", legacy: false|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte", legacy: false|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char", legacy: false|\
		primitive:"double", prime:"double", Primitive:"Double", Prime:"Double", legacy: true|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float", legacy: false|\
		primitive:"integer", prime:"int", Primitive:"Integer", Prime:"Int", legacy: true|\
		primitive:"long", prime:"long", Primitive:"Long", Prime:"Long", legacy: true|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short", legacy: false

#var Spliterator

#if legacy
#var Spliterator "Spliterator.Of" + Prime
#else
#var Spliterator Prime + "Spliterator"
#endif

/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

#ln 1
#if legacy
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.#paste Prime#Consumer;
import java.util.function.#paste Prime#Predicate;
#else
import cufy.util.function.#paste Prime#Consumer;
import cufy.util.function.#paste Prime#Predicate;
#endif
#ln 1

/**
 * A set specified for {@code #paste prime#} values.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.09.01
 */
public interface #paste Prime#Set
		extends
		#ln
		#lt 1##paste Prime#Collection,
		PrimitiveSet<#paste Primitive#, #paste Prime#Consumer, #paste Prime#Predicate> {
	@Override
	default boolean remove(Object object) {
		return object instanceof #paste Primitive# && this.remove#paste Prime#((#paste prime#) object);
	}

	@Override
	default boolean contains(Object object) {
		return object instanceof #paste Primitive# && this.contains((#paste prime#) object);
	}

	@Override
	default boolean add(#paste Primitive# element) {
		return this.add#paste Prime#(element);
	}

	#if legacy
	#ln 1
	@Override
	default #paste Spliterator# spliterator() {
		return Spliterators.spliteratorUnknownSize(this.iterator(), 0);
	}
	#endif
	#ln
}
