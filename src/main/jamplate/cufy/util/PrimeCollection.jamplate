#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean", legacy: false|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte", legacy: false|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char", legacy: false|\
		primitive:"double", prime:"double", Primitive:"Double", Prime:"Double", legacy: true|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float", legacy: false|\
		primitive:"integer", prime:"int", Primitive:"Integer", Prime:"Int", legacy: true|\
		primitive:"long", prime:"long", Primitive:"Long", Prime:"Long", legacy: true|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short", legacy: false

#var Iterator
#var Spliterator

#if legacy
#var Iterator "PrimitiveIterator.Of" + Prime
#var Spliterator "Spliterator.Of" + Prime
#else
#var Iterator Prime + "Iterator"
#var Spliterator Prime + "Spliterator"
#endif

/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

#ln 1
#if legacy
import cufy.lang.#paste Prime#Iterable;

import java.util.Objects;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.#paste Prime#Consumer;
import java.util.function.#paste Prime#Predicate;
import java.util.function.Predicate;
import java.util.stream.#paste Prime#Stream;
import java.util.stream.StreamSupport;
#else
import cufy.lang.#paste Prime#Iterable;
import cufy.util.function.#paste Prime#Consumer;
import cufy.util.function.#paste Prime#Predicate;

import java.util.Objects;
import java.util.function.Predicate;
#endif
#ln 1

/**
 * A collection specialized for {@code #paste prime#} values.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.09.01
 */
public interface #paste Prime#Collection
		extends
		#ln
		#lt 1##paste Prime#Iterable,
		PrimitiveCollection<#paste Primitive#, #paste Prime#Consumer, #paste Prime#Predicate> {
	@Override
	default boolean add(#paste Primitive# element) {
		return this.add#paste Prime#(element);
	}

	@Override
	default boolean contains(Object object) {
		return object instanceof #paste Primitive# && this.contains((#paste prime#) object);
	}

	@Override
	default boolean remove(Object object) {
		return object instanceof #paste Primitive# && this.remove#paste Prime#((#paste prime#) object);
	}

	@Override
	default boolean removeIf(Predicate<? super #paste Primitive#> predicate) {
		Objects.requireNonNull(predicate, "predicate");
		return this.removeIf(
				predicate instanceof #paste Prime#Predicate ?
				(#paste Prime#Predicate) predicate :
				predicate::test
		);
	}

	@Override
	default boolean removeIf(#paste Prime#Predicate predicate) {
		Objects.requireNonNull(predicate, "predicate");
		boolean modified = false;

		#ln
		#lt 1##paste Iterator# iterator = this.iterator();
		while (iterator.hasNext())
			if (predicate.test(iterator.next())) {
				iterator.remove();
				modified = true;
			}

		return modified;
	}

	#if legacy
	#ln 1
	@Override
	default #paste Spliterator# spliterator() {
		return Spliterators.spliteratorUnknownSize(this.iterator(), 0);
	}

	/**
	 * Get a {@link #paste Prime#Stream} streaming the elements in this collection.
	 *
	 * @return a stream streaming the elements in this collection.
	 * @since 0.1.5 ~2020.08.11
	 */
	default #paste Prime#Stream #paste prime#Stream() {
		return StreamSupport.#paste prime#Stream(this.spliterator(), false);
	}

	/**
	 * Get a parallel {@link #paste Prime#Stream} streaming the elements in this collection.
	 *
	 * @return a stream streaming the elements in this collection.
	 * @since 0.1.5 ~2020.08.11
	 */
	default #paste Prime#Stream parallel#paste Prime#Stream() {
		return StreamSupport.#paste prime#Stream(this.spliterator(), true);
	}
	#endif
	#ln 1

	/**
	 * Ensures that this collection contains the specified element (optional operation).  Returns
	 * {@code true} if this collection changed as a result of the call. (Returns {@code false} if
	 * this collection does not permit duplicates and already contains the specified element.)
	 *
	 * @param element element whose presence in this collection is to be ensured
	 * @return {@code true} if this collection changed as a result of the call.
	 * @throws UnsupportedOperationException if the {@code add} operation is not supported by this
	 *                                       collection.
	 * @throws IllegalArgumentException      if some property of the element prevents it from being
	 *                                       added to this collection.
	 * @throws IllegalStateException         if the element cannot be added at this time due to
	 *                                       insertion restrictions.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean add#paste Prime#(#paste prime# element);

	/**
	 * Returns {@code true} if this collection contains the specified element.
	 *
	 * @param element element whose presence in this collection is to be tested
	 * @return {@code true} if this collection contains the specified element.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean contains(#paste prime# element);

	/**
	 * Removes a single instance of the specified element from this collection, if it is present
	 * (optional operation).
	 *
	 * @param element element to be removed from this collection, if present.
	 * @return {@code true} if an element was removed as a result of this call.
	 * @throws UnsupportedOperationException if the {@code remove} operation is not supported by
	 *                                       this collection.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean remove#paste Prime#(#paste prime# element);

	/**
	 * Returns an array containing all of the elements in this collection. If this collection makes
	 * any guarantees as to what order its elements are returned by its iterator, this method must
	 * return the elements in the same order.
	 *
	 * @return an array containing all of the elements in this collection.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime#[] to#paste Prime#Array();

	/**
	 * Returns an array containing all of the elements in this collection;
	 * <p>
	 * If this collection fits in the specified array with room to spare (i.e., the array has more
	 * elements than this collection), the element in the array immediately following the end of the
	 * collection is set to the {@code default primitive value}. (This is useful in determining the
	 * length of this collection <i>only</i> if the caller knows that this collection does not
	 * contain any {@code default primitive value} elements.)
	 *
	 * @param array the array into which the elements of this collection are to be stored, if it is
	 *              big enough; otherwise, a new array is allocated for this purpose.
	 * @return an array containing all of the elements in this collection.
	 * @throws NullPointerException if the given {@code array} is null.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime#[] to#paste Prime#Array(#paste prime#[] array);
}
