#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean", legacy: false|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte", legacy: false|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char", legacy: false|\
		primitive:"double", prime:"double", Primitive:"Double", Prime:"Double", legacy: true|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float", legacy: false|\
		primitive:"integer", prime:"int", Primitive:"Integer", Prime:"Int", legacy: true|\
		primitive:"long", prime:"long", Primitive:"Long", Prime:"Long", legacy: true|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short", legacy: false

#var Spliterator

#if legacy
#var Spliterator "Spliterator.Of" + Prime
#else
#var Spliterator Prime + "Spliterator"
#endif

/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

#ln 1
#if legacy
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.#paste Prime#Consumer;
import java.util.function.#paste Prime#Predicate;
#else
import cufy.util.function.#paste Prime#Consumer;
import cufy.util.function.#paste Prime#Predicate;

import java.util.NoSuchElementException;
#endif
#ln 1

/**
 * a sorted set for {@code #paste prime#} values.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.09.01
 */
public interface #paste Prime#SortedSet
		extends
		#ln
		#lt 1##paste Prime#Set,
		PrimitiveSortedSet<#paste Primitive#, #paste Prime#Consumer, #paste Prime#Predicate> {
	@Override
	default boolean add(#paste Primitive# element) {
		return this.add#paste Prime#(element);
	}

	@Override
	default boolean contains(Object object) {
		return object instanceof #paste Primitive# && this.contains((#paste prime#) object);
	}

	@Override
	default #paste Primitive# first() {
		return this.first#paste Prime#();
	}

	@Override
	default #paste Prime#SortedSet headSet(#paste Primitive# endElement) {
		return this.headSet((#paste prime#) endElement);
	}

	@Override
	default #paste Primitive# last() {
		return this.last#paste Prime#();
	}

	@Override
	default boolean remove(Object object) {
		return object instanceof #paste Primitive# && this.remove#paste Prime#((#paste prime#) object);
	}

	#if legacy
	#ln 1
	@Override
	default #paste Spliterator# spliterator() {
		return Spliterators.spliteratorUnknownSize(this.iterator(), 0);
	}
	#endif
	#ln 1

	@Override
	default #paste Prime#SortedSet subSet(#paste Primitive# beginElement, #paste Primitive# endElement) {
		return this.subSet((#paste prime#) beginElement, (#paste prime#) endElement);
	}

	@Override
	default #paste Prime#SortedSet tailSet(#paste Primitive# beginElement) {
		return this.tailSet((#paste prime#) beginElement);
	}

	@Override
	#ln
	#lt##paste Prime#Comparator comparator();

	/**
	 * Returns the first (lowest) element currently in this set.
	 *
	 * @return the first (lowest) element currently in this set.
	 * @throws NoSuchElementException if this set is empty.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime# first#paste Prime#();

	/**
	 * Returns a view of the portion of this set whose elements are strictly less than {@code
	 * endElement}. The returned set is backed by this set, so changes in the returned set are
	 * reflected in this set, and vice-versa. The returned set supports all optional set operations
	 * that this set supports.
	 * <p>
	 * The returned set will throw an <tt>IllegalArgumentException</tt> on an attempt to insert an
	 * element outside its range.
	 *
	 * @param endElement high endpoint (exclusive) of the returned set.
	 * @return a view of the portion of this set whose elements are strictly less than {@code
	 * 		endElement}.
	 * @throws IllegalArgumentException if this set itself has a restricted range, and {@code
	 *                                  endElement} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste Prime#SortedSet headSet(#paste prime# endElement);

	/**
	 * Returns the last (highest) element currently in this set.
	 *
	 * @return the last (highest) element currently in this set.
	 * @throws NoSuchElementException if this set is empty.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime# last#paste Prime#();

	/**
	 * Returns a view of the portion of this set whose elements range from {@code beginElement},
	 * inclusive, to {@code endElement}, exclusive.  (If {@code beginElement} and {@code endElement}
	 * are equal, the returned set is empty.) The returned set is backed by this set, so changes in
	 * the returned set are reflected in this set, and vice-versa. The returned set supports all
	 * optional set operations that this set supports.
	 * <p>
	 * The returned set will throw an <tt>IllegalArgumentException</tt> on an attempt to insert an
	 * element outside its range.
	 *
	 * @param beginElement low endpoint (inclusive) of the returned set.
	 * @param endElement   high endpoint (exclusive) of the returned set.
	 * @return a view of the portion of this set whose elements range from {@code beginElement},
	 * 		inclusive, to {@code endElement}, exclusive.
	 * @throws IllegalArgumentException if {@code beginElement} is greater than {@code endElement};
	 *                                  or if this set itself has a restricted range, and {@code
	 *                                  fromElement} or {@code toElement} lies outside the bounds of
	 *                                  the range.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste Prime#SortedSet subSet(#paste prime# beginElement, #paste prime# endElement);

	/**
	 * Returns a view of the portion of this set whose elements are greater than or equal to {@code
	 * beginElement}. The returned set is backed by this set, so changes in the returned set are
	 * reflected in this set, and vice-versa. The returned set supports all optional set operations
	 * that this set supports.
	 * <p>
	 * The returned set will throw an <tt>IllegalArgumentException</tt> on an attempt to insert an
	 * element outside its range.
	 *
	 * @param beginElement low endpoint (inclusive) of the returned set.
	 * @return a view of the portion of this set whose elements are greater than or equal to {@code
	 * 		beginElement}
	 * @throws IllegalArgumentException if this set itself has a restricted range, and {@code
	 *                                  beginElement} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste Prime#SortedSet tailSet(#paste prime# beginElement);
}
