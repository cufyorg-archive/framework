#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean", legacy: false, defaultValue:"false"|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte", legacy: false, defaultValue:"0"|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char", legacy: false, defaultValue:"0"|\
		primitive:"double", prime:"double", Primitive:"Double", Prime:"Double", legacy: true, defaultValue:"0.0D"|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float", legacy: false, defaultValue:"0.0F"|\
		primitive:"integer", prime:"int", Primitive:"Integer", Prime:"Int", legacy: true, defaultValue:"0"|\
		primitive:"long", prime:"long", Primitive:"Long", Prime:"Long", legacy: true, defaultValue:"0L"|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short", legacy: false, defaultValue:"0"

/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

#ln 1
#if legacy
import cufy.util.function.#paste Prime#BiConsumer;

import java.util.function.#paste Prime#BinaryOperator;
#else
import cufy.util.function.#paste Prime#BiConsumer;
import cufy.util.function.#paste Prime#BinaryOperator;
#endif
#ln 1

/**
 * A navigable map specialized for {@code #paste prime#} values.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.09.03
 */
public interface #paste Prime#NavigableMap
		extends
		#ln
		#lt 1##paste Prime#SortedMap,
		PrimitiveNavigableMap<#paste Primitive#, #paste Primitive#, #paste Prime#BiConsumer, #paste Prime#BinaryOperator> {
	@Override
	default #paste Prime#Entry ceilingEntry(#paste Primitive# key) {
		return this.ceilingEntry((#paste prime#) key);
	}

	@Override
	default #paste Primitive# ceilingKey(#paste Primitive# key) {
		return this.hasCeilingKey(key) ?
			   this.ceiling#paste Prime#Key(key) :
			   null;
	}

	@Override
	default #paste Prime#Entry floorEntry(#paste Primitive# key) {
		return this.floorEntry((#paste prime#) key);
	}

	@Override
	default #paste Primitive# floorKey(#paste Primitive# key) {
		return this.hasFloorKey(key) ?
			   this.floor#paste Prime#Key(key) :
			   null;
	}

	@Override
	default #paste Prime#SortedMap headMap(#paste Primitive# endKey) {
		return this.headMap((#paste prime#) endKey);
	}

	@Override
	default #paste Prime#NavigableMap headMap(#paste Primitive# endKey, boolean inclusive) {
		return this.headMap((#paste prime#) endKey, inclusive);
	}

	@Override
	default #paste Prime#Entry higherEntry(#paste Primitive# key) {
		return this.higherEntry((#paste prime#) key);
	}

	@Override
	default #paste Primitive# higherKey(#paste Primitive# key) {
		return this.hasHigherKey(key) ?
			   this.higher#paste Prime#Key(key) :
			   null;
	}

	@Override
	default #paste Prime#Entry lowerEntry(#paste Primitive# key) {
		return this.lowerEntry((#paste prime#) key);
	}

	@Override
	default #paste Primitive# lowerKey(#paste Primitive# key) {
		return this.hasLowerKey(key) ?
			   this.lower#paste Prime#Key(key) :
			   null;
	}

	@Override
	default #paste Prime#SortedMap subMap(#paste Primitive# beginKey, #paste Primitive# endKey) {
		return this.subMap((#paste prime#) beginKey, (#paste prime#) endKey);
	}

	@Override
	default #paste Prime#NavigableMap subMap(#paste Primitive# beginKey, boolean beginInclusive, #paste Primitive# endKey, boolean endInclusive) {
		return this.subMap((#paste prime#) beginKey, beginInclusive, (#paste prime#) endKey, endInclusive);
	}

	@Override
	default #paste Prime#SortedMap tailMap(#paste Primitive# beginKey) {
		return this.tailMap((#paste prime#) beginKey);
	}

	@Override
	default #paste Prime#NavigableMap tailMap(#paste Primitive# beginKey, boolean inclusive) {
		return this.tailMap((#paste prime#) beginKey, inclusive);
	}

	@Override
	#ln
	#lt##paste Prime#NavigableSet descendingKeySet();

	@Override
	#ln
	#lt##paste Prime#NavigableMap descendingMap();

	@Override
	#ln
	#lt##paste Prime#Entry firstEntry();

	@Override
	#ln
	#lt##paste Prime#Entry lastEntry();

	@Override
	#ln
	#lt##paste Prime#NavigableSet navigableKeySet();

	@Override
	#ln
	#lt##paste Prime#Entry pollFirstEntry();

	@Override
	#ln
	#lt##paste Prime#Entry pollLastEntry();

	/**
	 * Returns the least key greater than or equal to the given key, or {@code //DefaultValue//}
	 * if there is no such key.
	 *
	 * @param key the key.
	 * @return the least key greater than or equal to {@code key}, or {@code //DefaultValue//} if
	 * 		there is no such key.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste prime# ceiling#paste Prime#Key(#paste prime# key);

	/**
	 * Returns a key-value mapping associated with the least key greater than or equal to the given
	 * key, or {@code null} if there is no such key.
	 *
	 * @param key the key.
	 * @return an entry with the least key greater than or equal to {@code key}, or {@code null} if
	 * 		there is no such key.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#Entry ceilingEntry(#paste prime# key);

	/**
	 * Returns the greatest key less than or equal to the given key, or {@code #paste defaultValue#}
	 * if there is no such key.
	 *
	 * @param key the key
	 * @return the greatest key less than or equal to {@code key}, or {@code #paste defaultValue#} if
	 * 		there is no such key.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste prime# floor#paste Prime#Key(#paste prime# key);

	/**
	 * Returns a key-value mapping associated with the greatest key less than or equal to the given
	 * key, or {@code null} if there is no such key.
	 *
	 * @param key the key.
	 * @return an entry with the greatest key less than or equal to {@code key}, or {@code null} if
	 * 		there is no such key.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#Entry floorEntry(#paste prime# key);

	/**
	 * Return true if there is a least key in this map greater than or equal to the given {@code
	 * key}.
	 *
	 * @param key the key to match.
	 * @return true, if there is a least key in this map greater than or equal to the given {@code
	 * 		key}.
	 * @since 0.1.5 ~2020.09.03
	 */
	boolean hasCeilingKey(#paste prime# key);

	/**
	 * Return true if there is a greatest key in this less than or equal to the given {@code key}.
	 *
	 * @param key the key to match.
	 * @return true, if there is a greatest key less than or equal to the given {@code key}.
	 * @since 0.1.5 ~2020.09.03
	 */
	boolean hasFloorKey(#paste prime# key);

	/**
	 * Return true if there is a least key in this map strictly greater than the given {@code key}.
	 *
	 * @param key the key to match
	 * @return true, if there is a least key greater than teh given {@code key}.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean hasHigherKey(#paste prime# key);

	/**
	 * Return true if there is a greatest key in this map strictly less than the given {@code key}.
	 *
	 * @param key the key to match.
	 * @return true, if there is a greatest key less than the given {@code element}.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean hasLowerKey(#paste prime# key);

	/**
	 * Returns a view of the portion of this map whose keys are less than (or equal to, if {@code
	 * inclusive} is true) {@code beginKey}. The returned map is backed by this map, so changes in
	 * the returned map are reflected in this map, and vice-versa. The returned map supports all
	 * optional map operations that this map supports.
	 * <p>
	 * The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key
	 * outside its range.
	 *
	 * @param endKey    high endpoint of the keys in the returned map.
	 * @param inclusive {@code true} if the high endpoint is to be included in the returned view.
	 * @return a view of the portion of this map whose keys are less than (or equal to, if {@code
	 * 		inclusive} is true) {@code endKey}.
	 * @throws IllegalArgumentException if this map itself has a restricted range, and {@code
	 *                                  endKey} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#NavigableMap headMap(#paste prime# endKey, boolean inclusive);

	/**
	 * Returns the least key strictly greater than the given key, or {@code #paste defaultValue#} if
	 * there is no such key.
	 *
	 * @param key the key.
	 * @return the least key greater than {@code key}, or {@code #paste defaultValue#} if there is no
	 * 		such key.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste prime# higher#paste Prime#Key(#paste prime# key);

	/**
	 * Returns a key-value mapping associated with the least key strictly greater than the given
	 * key, or {@code null} if there is no such key.
	 *
	 * @param key the key.
	 * @return an entry with the least key greater than {@code key}, or {@code null} if there is no
	 * 		such key.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#Entry higherEntry(#paste prime# key);

	/**
	 * Returns the greatest key strictly less than the given key, or {@code #paste defaultValue#} if
	 * there is no such key.
	 *
	 * @param key the key.
	 * @return the greatest key less than {@code key}, or {@code #paste defaultValue#} if there is no
	 * 		such key.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste prime# lower#paste Prime#Key(#paste prime# key);

	/**
	 * Returns a key-value mapping associated with the greatest key strictly less than the given
	 * key, or {@code null} if there is no such key.
	 *
	 * @param key the key.
	 * @return an entry with the greatest key less than {@code key}, or {@code null} if there is no
	 * 		such key.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#Entry lowerEntry(#paste prime# key);

	/**
	 * Returns a view of the portion of this map whose keys range from {@code beginKey} to {@code
	 * endKey}. If {@code beginKey} and {@code endKey} are equal, the returned map is empty unless
	 * {@code beginInclusive} and {@code endInclusive} are both true. The returned map is backed by
	 * this map, so changes in the returned map are reflected in this map, and vice-versa. The
	 * returned map supports all optional map operations that this map supports.
	 * <p>
	 * The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key
	 * outside of its range, or to construct a submap either of whose endpoints lie outside its
	 * range.
	 *
	 * @param beginKey       low endpoint of the keys in the returned map.
	 * @param beginInclusive {@code true} if the low endpoint is to be included in the returned
	 *                       view.
	 * @param endKey         high endpoint of the keys in the returned map.
	 * @param endInclusive   {@code true} if the high endpoint is to be included in the returned
	 *                       view.
	 * @return a view of the portion of this map whose keys range from {@code beginKey} to {@code
	 * 		endKey}.
	 * @throws IllegalArgumentException if {@code beginKey} is greater than {@code endKey}; or if
	 *                                  this map itself has a restricted range, and {@code beginKey}
	 *                                  or {@code endKey} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#NavigableMap subMap(#paste prime# beginKey, boolean beginInclusive, #paste prime# endKey, boolean endInclusive);

	/**
	 * Returns a view of the portion of this map whose keys are greater than (or equal to, if {@code
	 * inclusive} is true) {@code beginKey}. The returned map is backed by this map, so changes in
	 * the returned map are reflected in this map, and vice-versa. The returned map supports all
	 * optional map operations that this map supports.
	 * <p>
	 * The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key
	 * outside its range.
	 *
	 * @param beginKey  low endpoint of the keys in the returned map.
	 * @param inclusive {@code true} if the low endpoint is to be included in the returned view.
	 * @return a view of the portion of this map whose keys are greater than (or equal to, if {@code
	 * 		inclusive} is true) {@code beginKey}.
	 * @throws IllegalArgumentException if this map itself has a restricted range, and {@code
	 *                                  beginKey} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#NavigableMap tailMap(#paste prime# beginKey, boolean inclusive);
}
