/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

import cufy.util.function.*;

import java.util.function.*;

/**
 * A class holding custom functional interfaces' classes that could throw a must-catch throwables.
 * <p>
 * Note: this class chosen to be an interface to allow inheritance in the utility classes.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.08.30
 */
public interface Unchecked {
	//Misc

	/**
	 * A java syntax glitch to throw any throwable without the need to catch it.
	 *
	 * @param throwable to be ignite.
	 * @return nothing.
	 * @throws NullPointerException if the given throwable is null.
	 */
	static Error ignite(Throwable throwable) {
		return Unchecked.ignite0(throwable);
	}

	/**
	 * A java syntax glitch to throw any throwable without the need to catch it.
	 *
	 * @param throwable to be ignite
	 * @param <T>       the type of the throwable to trick the compiler that it's the one thrown
	 * @return nothing.
	 * @throws T                    exactly the given throwable (unless if the given throwable is
	 *                              null. Then NullPointerException will be thrown).
	 * @throws NullPointerException if the given {@code throwable} is null.
	 */
	static <T extends Throwable> T ignite0(Throwable throwable) throws T {
		Objects.requireNonNull(throwable, "throwable");
		throw (T) throwable;
	}

	//Object

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param consumer the lambda.
	 * @param <T>      the type of the first argument to the operation.
	 * @param <U>      the type of the second argument to the operation.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, U, E extends Throwable> UncheckedBiConsumer<T, U, E> biConsumer(UncheckedBiConsumer<T, U, E> consumer) {
		return Objects.requireNonNull(consumer, "consumer");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <T>      the type of the first argument to the function.
	 * @param <U>      the type of the second argument to the function.
	 * @param <R>      the type of the result of the function.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, U, R, E extends Throwable> UncheckedBiFunction<T, U, R, E> biFunction(UncheckedBiFunction<T, U, R, E> function) {
		return Objects.requireNonNull(function, "function");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param operator the lambda.
	 * @param <T>      the type of the operands and result of the operator.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, E extends Throwable> UncheckedBinaryOperator<T, E> binaryOperator(UncheckedBinaryOperator<T, E> operator) {
		return Objects.requireNonNull(operator, "operator");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param predicate the lambda.
	 * @param <T>       the type of the first argument to the predicate.
	 * @param <U>       the type of the second argument the predicate.
	 * @param <E>       the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, U, E extends Throwable> UncheckedBiPredicate<T, U, E> biPredicate(UncheckedBiPredicate<T, U, E> predicate) {
		return Objects.requireNonNull(predicate, "predicate");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param consumer the lambda.
	 * @param <E>      the exception.
	 * @param <T>      the type of the input to the operation.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, E extends Throwable> UncheckedConsumer<T, E> consumer(UncheckedConsumer<T, E> consumer) {
		return Objects.requireNonNull(consumer, "consumer");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <E>      the exception.
	 * @param <T>      the type of the input to the function.
	 * @param <R>      the type of the result of the function.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, R, E extends Throwable> UncheckedFunction<T, R, E> function(UncheckedFunction<T, R, E> function) {
		return Objects.requireNonNull(function, "function");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param predicate the lambda.
	 * @param <T>       the type of the first argument to the predicate.
	 * @param <E>       the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, E extends Throwable> UncheckedPredicate<T, E> predicate(UncheckedPredicate<T, E> predicate) {
		return Objects.requireNonNull(predicate, "predicate");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param runnable the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <E extends Throwable> UncheckedRunnable<E> runnable(UncheckedRunnable<E> runnable) {
		return Objects.requireNonNull(runnable, "runnable");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param supplier the lambda.
	 * @param <T>      the type of results supplied by this supplier.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, E extends Throwable> UncheckedSupplier<T, E> supplier(UncheckedSupplier<T, E> supplier) {
		return Objects.requireNonNull(supplier, "supplier");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param operator the lambda.
	 * @param <T>      the type of the operand and result of the operator.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.08.30
	 */
	static <T, E extends Throwable> UncheckedUnaryOperator<T, E> unaryOperator(UncheckedUnaryOperator<T, E> operator) {
		return Objects.requireNonNull(operator, "operator");
	}

	#for primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean", legacy: false|\
    		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte", legacy: false|\
    		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char", legacy: false|\
    		primitive:"double", prime:"double", Primitive:"Double", Prime:"Double", legacy: true|\
    		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float", legacy: false|\
    		primitive:"integer", prime:"int", Primitive:"Integer", Prime:"Int", legacy: true|\
    		primitive:"long", prime:"long", Primitive:"Long", Prime:"Long", legacy: true|\
    		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short", legacy: false
    #ln 1
	//#paste Prime#

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param consumer the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Prime#BiConsumer<E> #paste prime#BiConsumer(Unchecked#paste Prime#BiConsumer<E> consumer) {
		return Objects.requireNonNull(consumer, "consumer");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <E>      the exception.
	 * @param <R> the type of the result of the function.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <R, E extends Throwable> Unchecked#paste Prime#BiFunction<R, E> #paste prime#BiFunction(Unchecked#paste Prime#BiFunction<R, E> function) {
		return Objects.requireNonNull(function, "function");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param operator the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Prime#BinaryOperator<E> #paste prime#BinaryOperator(Unchecked#paste Prime#BinaryOperator<E> operator) {
		return Objects.requireNonNull(operator, "operator");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param predicate the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Prime#BiPredicate<E> #paste prime#BiPredicate(Unchecked#paste Prime#BiPredicate<E> predicate) {
		return Objects.requireNonNull(predicate, "predicate");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param consumer the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Prime#Consumer<E> #paste prime#Consumer(Unchecked#paste Prime#Consumer<E> consumer) {
		return Objects.requireNonNull(consumer, "consumer");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <E>      the exception.
	 * @param <R> the type of the result of the function.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <R, E extends Throwable> Unchecked#paste Prime#Function<R, E> #paste prime#Function(Unchecked#paste Prime#Function<R, E> function) {
		return Objects.requireNonNull(function, "function");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <E>      the exception.
	 * @param <U> the type of the second argument to the operation.
	 * @param <R> the type of the result of the function.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <U, R, E extends Throwable> Unchecked#paste Prime#ObjBiFunction<U, R, E> #paste prime#ObjBiFunction(Unchecked#paste Prime#ObjBiFunction<U, R, E> function) {
		return Objects.requireNonNull(function, "function");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param predicate the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Prime#Predicate<E> #paste prime#Predicate(Unchecked#paste Prime#Predicate<E> predicate) {
		return Objects.requireNonNull(predicate, "predicate");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param supplier the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Prime#Supplier<E> #paste prime#Supplier(Unchecked#paste Prime#Supplier<E> supplier) {
		return Objects.requireNonNull(supplier, "supplier");
	}

	#for essential:"double", essen:"double", Essential:"Double", Essen:"Double"|\
    		essential:"integer", essen:"int", Essential:"Integer", Essen:"Int"|\
    		essential:"long", essen:"long", Essential:"Long", Essen:"Long"
    #if primitive != essential
    #ln 1
	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Prime#To#paste Essen#Function<E> #paste prime#To#paste Essen#Function(Unchecked#paste Prime#To#paste Essen#Function<E> function) {
		return Objects.requireNonNull(function, "function");
	}
	#endif
	#endfor
    #ln 1

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param operator the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Prime#UnaryOperator<E> #paste prime#UnaryOperator(Unchecked#paste Prime#UnaryOperator<E> operator) {
		return Objects.requireNonNull(operator, "operator");
	}

	#for essential:"double", essen:"double", Essential:"Double", Essen:"Double"|\
    		essential:"integer", essen:"int", Essential:"Integer", Essen:"Int"|\
    		essential:"long", essen:"long", Essential:"Long", Essen:"Long"
	#if !legacy
	#ln 1
	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <E>      the exception.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <E extends Throwable> Unchecked#paste Essen#To#paste Prime#Function<E> #paste essen#To#paste Prime#Function(Unchecked#paste Essen#To#paste Prime#Function<E> function) {
		return Objects.requireNonNull(function, "function");
	}
	#endif
	#endfor
	#ln 1

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param consumer the lambda.
	 * @param <E>      the exception.
	 * @param <T> the type of the object argument to the operation.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <T, E extends Throwable> UncheckedObj#paste Prime#Consumer<T, E> obj#paste Prime#Consumer(UncheckedObj#paste Prime#Consumer<T, E> consumer) {
		return Objects.requireNonNull(consumer, "consumer");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <E>      the exception.
	 * @param <T> the type of the first argument to the function.
	 * @param <U> the type of the second argument to the function.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <T, U, E extends Throwable> UncheckedTo#paste Prime#BiFunction<T, U, E> to#paste Prime#BiFunction(UncheckedTo#paste Prime#BiFunction<T, U, E> function) {
		return Objects.requireNonNull(function, "function");
	}

	/**
	 * A helper method to instantiate a new throw lambda.
	 *
	 * @param function the lambda.
	 * @param <E>      the exception.
	 * @param <T> the type of the first argument to the function.
	 * @return the given lambda.
	 * @throws NullPointerException if the given lambda is null.
	 * @since 0.1.5 ~2020.09.13
	 */
	static <T, E extends Throwable> UncheckedTo#paste Prime#Function<T, E> to#paste Prime#Function(UncheckedTo#paste Prime#Function<T, E> function) {
		return Objects.requireNonNull(function, "function");
	}
	#endfor
	#ln
}
