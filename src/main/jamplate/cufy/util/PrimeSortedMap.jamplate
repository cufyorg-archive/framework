#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean", legacy: false|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte", legacy: false|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char", legacy: false|\
		primitive:"double", prime:"double", Primitive:"Double", Prime:"Double", legacy: true|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float", legacy: false|\
		primitive:"integer", prime:"int", Primitive:"Integer", Prime:"Int", legacy: true|\
		primitive:"long", prime:"long", Primitive:"Long", Prime:"Long", legacy: true|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short", legacy: false

/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

#ln 1
#if legacy
import cufy.util.function.#paste Prime#BiConsumer;

import java.util.function.#paste Prime#BinaryOperator;
#else
import cufy.util.function.#paste Prime#BiConsumer;
import cufy.util.function.#paste Prime#BinaryOperator;
#endif
#ln 1

/**
 * A sorted map specialized for {@code #paste prime#} values.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.09.03
 */
public interface #paste Prime#SortedMap
		extends
		#ln
		#lt 1##paste Prime#Map,
		PrimitiveSortedMap<#paste Primitive#, #paste Primitive#, #paste Prime#BiConsumer, #paste Prime#BinaryOperator> {
	@Override
	default #paste Primitive# firstKey() {
		return this.first#paste Prime#Key();
	}

	@Override
	default #paste Prime#SortedMap headMap(#paste Primitive# endKey) {
		return this.headMap((#paste prime#) endKey);
	}

	@Override
	default #paste Primitive# lastKey() {
		return this.last#paste Prime#Key();
	}

	@Override
	default #paste Prime#SortedMap subMap(#paste Primitive# beginKey, #paste Primitive# endKey) {
		return this.subMap((#paste prime#) beginKey, (#paste prime#) endKey);
	}

	@Override
	default #paste Prime#SortedMap tailMap(#paste Primitive# beginKey) {
		return this.tailMap((#paste prime#) beginKey);
	}

	@Override
	#ln
	#lt##paste Prime#Comparator comparator();

	/**
	 * Returns the first (lowest) key currently in this map.
	 *
	 * @return the first (lowest) key currently in this map.
	 * @throws java.util.NoSuchElementException if this map is empty.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste prime# first#paste Prime#Key();

	/**
	 * Returns a view of the portion of this map whose keys are strictly less than {@code endKey}.
	 * The returned map is backed by this map, so changes in the returned map are reflected in this
	 * map, and vice-versa. The returned map supports all optional map operations that this map
	 * supports.
	 * <p>
	 * The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key
	 * outside its range.
	 *
	 * @param endKey high endpoint (exclusive) of the keys in the returned map.
	 * @return a view of the portion of this map whose keys are strictly less than {@code endKey}.
	 * @throws IllegalArgumentException if this map itself has a restricted range, and {@code
	 *                                  endKey} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#SortedMap headMap(#paste prime# endKey);

	/**
	 * Returns the last (highest) key currently in this map.
	 *
	 * @return the last (highest) key currently in this map
	 * @throws java.util.NoSuchElementException if this map is empty.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste prime# last#paste Prime#Key();

	/**
	 * Returns a view of the portion of this map whose keys range from {@code beginKey}, inclusive,
	 * to {@code endKey}, exclusive. (If {@code beginKey} and {@code endKey} are equal, the returned
	 * map is empty.) The returned map is backed by this map, so changes in the returned map are
	 * reflected in this map, and vice-versa. The returned map supports all optional map operations
	 * that this map supports.
	 * <p>
	 * The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key
	 * outside its range.
	 *
	 * @param beginKey low endpoint (inclusive) of the keys in the returned map.
	 * @param endKey   high endpoint (exclusive) of the keys in the returned map.
	 * @return a view of the portion of this map whose keys range from {@code beginKey}, inclusive,
	 * 		to {@code endKey}, exclusive.
	 * @throws IllegalArgumentException if {@code beginKey} is greater than {@code endKey}; or if
	 *                                  this map itself has a restricted range, and {@code beginKey}
	 *                                  or {@code endKey} lies outside the bounds of the range
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#SortedMap subMap(#paste prime# beginKey, #paste prime# endKey);

	/**
	 * Returns a view of the portion of this map whose keys are greater than or equal to {@code
	 * beginKey}. The returned map is backed by this map, so changes in the returned map are
	 * reflected in this map, and vice-versa. The returned map supports all optional map operations
	 * that this map supports.
	 * <p>
	 * The returned map will throw an {@code IllegalArgumentException} on an attempt to insert a key
	 * outside its range.
	 *
	 * @param beginKey low endpoint (inclusive) of the keys in the returned map
	 * @return a view of the portion of this map whose keys are greater than or equal to {@code
	 * 		beginKey}.
	 * @throws IllegalArgumentException if this map itself has a restricted range, and {@code
	 *                                  beginKey} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste Prime#SortedMap tailMap(#paste prime# beginKey);
}
