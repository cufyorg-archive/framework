#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean"|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte"|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char"|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float"|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short"
/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util.function;

import java.util.function.BiFunction;

/**
 * Represents a function that accepts two arguments and produces a #paste prime#-valued result. This is the
 * {@code #paste prime#}-producing primitive specialization for {@link BiFunction}.
 * <p>
 * This is a {@code functional interface} whose functional method is {@link \#applyAs#paste Prime#(Object,
 * Object)}.
 *
 * @param <T> the type of the first argument to the function.
 * @param <U> the type of the second argument to the function.
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.08.30
 */
@FunctionalInterface
public interface To#paste Prime#BiFunction<T, U> {
	/**
	 * Applies this function to the given arguments.
	 *
	 * @param t the first function argument.
	 * @param u the second function argument.
	 * @return the function result.
	 * @since 0.1.5 ~2020.08.30
	 */
	#ln
	#lt##paste prime# applyAs#paste Prime#(T t, U u);
}
