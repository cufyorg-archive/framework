#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean"|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte"|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char"|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float"|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short"
/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

import cufy.util.function.#paste Prime#Consumer;

import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.PrimitiveIterator;
import java.util.function.Consumer;

/**
 * An Iterator specialized for {@code #paste prime#} values.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.08.30
 */
public interface #paste Prime#Iterator
		extends
		PrimitiveIterator<#paste Primitive#, #paste Prime#Consumer> {
	@Override
	default void forEachRemaining(Consumer<? super #paste Primitive#> consumer) {
		Objects.requireNonNull(consumer, "consumer");
		this.forEachRemaining(
				consumer instanceof #paste Prime#Consumer ?
				(#paste Prime#Consumer) consumer :
				consumer::accept
		);
	}

	@Override
	default void forEachRemaining(#paste Prime#Consumer consumer) {
		Objects.requireNonNull(consumer, "consumer");
		while (this.hasNext())
			consumer.accept(this.next#paste Prime#());
	}

	@Override
	default #paste Primitive# next() {
		return this.next#paste Prime#();
	}

	/**
	 * Returns the next {@code #paste prime#} element in the iteration.
	 *
	 * @return the next {@code #paste prime#} element in the iteration.
	 * @throws NoSuchElementException if the iteration has no more elements.
	 * @since 0.1.5 ~2020.08.30
	 */
	#ln
	#lt##paste prime# next#paste Prime#();
}
