#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean", legacy: false, defaultValue:"false"|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte", legacy: false, defaultValue:"0"|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char", legacy: false, defaultValue:"0"|\
		primitive:"double", prime:"double", Primitive:"Double", Prime:"Double", legacy: true, defaultValue:"0.0D"|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float", legacy: false, defaultValue:"0.0F"|\
		primitive:"integer", prime:"int", Primitive:"Integer", Prime:"Int", legacy: true, defaultValue:"0"|\
		primitive:"long", prime:"long", Primitive:"Long", Prime:"Long", legacy: true, defaultValue:"0L"|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short", legacy: false, defaultValue:"0"

#var Iterator
#var Spliterator

#if legacy
#var Iterator "PrimitiveIterator.Of" + Prime
#var Spliterator "Spliterator.Of" + Prime
#else
#var Iterator Prime + "Iterator"
#var Spliterator Prime + "Spliterator"
#endif

/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

#ln 1
#if legacy
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.#paste Prime#Consumer;
import java.util.function.#paste Prime#Predicate;
#else
import cufy.util.function.#paste Prime#Consumer;
import cufy.util.function.#paste Prime#Predicate;
#endif
#ln 1

/**
 * A navigable set for {@code #paste prime#} values.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.09.01
 */
public interface #paste Prime#NavigableSet
		extends
		#ln
		#lt 1##paste Prime#SortedSet,
		PrimitiveNavigableSet<#paste Primitive#, #paste Prime#Consumer, #paste Prime#Predicate> {
	@Override
	default #paste Primitive# ceiling(#paste Primitive# element) {
		return this.hasCeiling(element) ?
			   this.ceiling#paste Prime#(element) :
			   null;
	}

	@Override
	default #paste Primitive# floor(#paste Primitive# element) {
		return this.hasFloor(element) ?
			   this.floor#paste Prime#(element) :
			   null;
	}

	@Override
	default #paste Prime#SortedSet headSet(#paste Primitive# endElement) {
		return this.headSet((#paste prime#) endElement);
	}

	@Override
	default #paste Prime#NavigableSet headSet(#paste Primitive# endElement, boolean inclusive) {
		return this.headSet((#paste prime#) endElement, inclusive);
	}

	@Override
	default #paste Primitive# higher(#paste Primitive# element) {
		return this.hasHigher(element) ?
			   this.higher#paste Prime#(element) :
			   null;
	}

	@Override
	default #paste Primitive# lower(#paste Primitive# element) {
		return this.hasLower(element) ?
			   this.lower#paste Prime#(element) :
			   null;
	}

	@Override
	default #paste Primitive# pollFirst() {
		return this.isEmpty() ?
			   null :
			   this.pollFirst#paste Prime#();
	}

	@Override
	default #paste Primitive# pollLast() {
		return this.isEmpty() ?
			   null :
			   this.pollLast#paste Prime#();
	}

	#if legacy
	#ln 1
	@Override
	default #paste Spliterator# spliterator() {
		return Spliterators.spliteratorUnknownSize(this.iterator(), 0);
	}
	#endif
	#ln 1

	@Override
	default #paste Prime#SortedSet subSet(#paste Primitive# beginElement, #paste Primitive# endElement) {
		return this.subSet((#paste prime#) beginElement, (#paste prime#) endElement);
	}

	@Override
	default #paste Prime#NavigableSet subSet(#paste Primitive# beginElement, boolean beginInclusive, #paste Primitive# endElement, boolean endInclusive) {
		return this.subSet((#paste prime#) beginElement, beginInclusive, (#paste prime#) endElement, endInclusive);
	}

	@Override
	default #paste Prime#SortedSet tailSet(#paste Primitive# beginElement) {
		return this.tailSet((#paste prime#) beginElement);
	}

	@Override
	default #paste Prime#NavigableSet tailSet(#paste Primitive# beginElement, boolean inclusive) {
		return this.tailSet((#paste prime#) beginElement, inclusive);
	}

	@Override
	#ln
	#lt##paste Iterator# descendingIterator();

	@Override
	#ln
	#lt##paste Prime#NavigableSet descendingSet();

	/**
	 * Returns the least element in this set greater than or equal to the given element, or the
	 * {@code #paste defaultValue#} if no such element.
	 *
	 * @param element the value to match.
	 * @return the least element greater than or equal to {@code element}, or {@code #paste defaultValue#}
	 *         if no such element.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime# ceiling#paste Prime#(#paste prime# element);

	/**
	 * Returns the greatest element in this set less than or equal to the given element, or the
	 * {@code #paste defaultValue#} if no such element.
	 *
	 * @param element the value to match.
	 * @return the greatest element less than or equal to {@code element}, or {@code #paste defaultValue#}
	 *         if no such element.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime# floor#paste Prime#(#paste prime# element);

	/**
	 * Return true if there is a least element in this set greater than or equal to the given {@code
	 * element}.
	 *
	 * @param element the element to match.
	 * @return true, if there is a least element in this set greater than or equal to the given
	 *        {@code element}.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean hasCeiling(#paste prime# element);

	/**
	 * Return true if there is a greatest element in this less than or equal to the given {@code
	 * element}.
	 *
	 * @param element the element to match.
	 * @return true, if there is a greatest element less than or equal to the given {@code element}.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean hasFloor(#paste prime# element);

	/**
	 * Return true if there is a least element in this set strictly greater than the given {@code
	 * element}.
	 *
	 * @param element the element to match
	 * @return true, if there is a least element greater than teh given {@code element}.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean hasHigher(#paste prime# element);

	/**
	 * Return true if there is a greatest element in this set strictly less than the given {@code
	 * element}.
	 *
	 * @param element the element to match.
	 * @return true, if there is a greatest element less than the given {@code element}.
	 * @since 0.1.5 ~2020.09.01
	 */
	boolean hasLower(#paste prime# element);

	/**
	 * Returns a view of the portion of this set whose elements are less than (or equal to, if
	 * {@code inclusive} is true) {@code endElement}. The returned set is backed by this set, so
	 * changes in the returned set are reflected in this set, and vice-versa. The returned set
	 * supports all optional set operations that this set supports.
	 * <p>
	 * The returned set will throw an {@code IllegalArgumentException} on an attempt to insert an
	 * element outside its range.
	 *
	 * @param endElement high endpoint of the returned set.
	 * @param inclusive  {@code true} if the high endpoint is to be included in the returned view.
	 * @return a view of the portion of this set whose elements are less than (or equal to, if
	 *        {@code inclusive} is true) {@code endElement}.
	 * @throws IllegalArgumentException if this set itself has a restricted range, and {@code
	 *                                  endElement} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste Prime#NavigableSet headSet(#paste prime# endElement, boolean inclusive);

	/**
	 * Returns the least element in this set strictly greater than the given element, or {@code #paste defaultValue#}
	 * if no such element.
	 *
	 * @param element the value to match.
	 * @return the least element greater than {@code element}, or the {@code #paste defaultValue#} if
	 * 		no such element.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime# higher#paste Prime#(#paste prime# element);

	/**
	 * Returns the greatest element in this set strictly less than the given element, or {@code #paste defaultValue#}
	 * if no such element.
	 *
	 * @param element the value to match.
	 * @return the greatest element less than {@code element}, or the {@code #paste defaultValue#} if
	 * 		no such element.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime# lower#paste Prime#(#paste prime# element);

	/**
	 * Retrieves and removes the first (lowest) element, or the {@code #paste defaultValue#} if no
	 * such element.
	 *
	 * @return the first element, or the {@code #paste defaultValue#} if no such element.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime# pollFirst#paste Prime#();

	/**
	 * Retrieves and removes the last (highest) element, or the {@code #paste defaultValue#} if no
	 * such element.
	 *
	 * @return the last element, or the {@code #paste defaultValue#} if no such element.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste prime# pollLast#paste Prime#();

	/**
	 * Returns a view of the portion of this set whose elements range from {@code beginElement} to
	 * {@code endElement}. If {@code beginElement} and {@code endElement} are equal, the returned
	 * set is empty unless {@code beginInclusive} and {@code endInclusive} are both true. The
	 * returned set is backed by this set, so changes in the returned set are reflected in this set,
	 * and vice-versa. The returned set supports all optional set operations that this set
	 * supports.
	 * <p>
	 * The returned set will throw an {@code IllegalArgumentException} on an attempt to insert an
	 * element outside its range.
	 *
	 * @param beginElement   low endpoint of the returned set.
	 * @param beginInclusive {@code true} if the low endpoint is to be included in the returned
	 *                       view.
	 * @param endElement     high endpoint of the returned set.
	 * @param endInclusive   {@code true} if the high endpoint is to be included in the returned
	 *                       view.
	 * @return a view of the portion of this set whose elements range from {@code beginElement},
	 * 		inclusive, to {@code endElement}, exclusive.
	 * @throws IllegalArgumentException if {@code beginElement} is greater than {@code endElement};
	 *                                  or if this set itself has a restricted range, and {@code
	 *                                  beginElement} or {@code endElement} lies outside the bounds
	 *                                  of the range.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste Prime#NavigableSet subSet(#paste prime# beginElement, boolean beginInclusive, #paste prime# endElement, boolean endInclusive);

	/**
	 * Returns a view of the portion of this set whose elements are greater than (or equal to, if
	 * {@code inclusive} is true) {@code beginElement}. The returned set is backed by this set, so
	 * changes in the returned set are reflected in this set, and vice-versa. The returned set
	 * supports all optional set operations that this set supports.
	 * <p>
	 * The returned set will throw an {@code IllegalArgumentException} on an attempt to insert an
	 * element outside its range.
	 *
	 * @param beginElement low endpoint of the returned set.
	 * @param inclusive    {@code true} if the low endpoint is to be included in the returned view.
	 * @return a view of the portion of this set whose elements are greater than or equal to {@code
	 * 		beginElement}.
	 * @throws IllegalArgumentException if this set itself has a restricted range, and {@code
	 *                                  beginElement} lies outside the bounds of the range.
	 * @since 0.1.5 ~2020.09.01
	 */
	#ln
	#lt##paste Prime#NavigableSet tailSet(#paste prime# beginElement, boolean inclusive);
}
