#make primitive:"boolean", prime:"boolean", Primitive:"Boolean", Prime:"Boolean", legacy: false, defaultValue:"false"|\
		primitive:"byte", prime:"byte", Primitive:"Byte", Prime:"Byte", legacy: false, defaultValue:"0"|\
		primitive:"character", prime:"char", Primitive:"Character", Prime:"Char", legacy: false, defaultValue:"0"|\
		primitive:"double", prime:"double", Primitive:"Double", Prime:"Double", legacy: true, defaultValue:"0.0D"|\
		primitive:"float", prime:"float", Primitive:"Float", Prime:"Float", legacy: false, defaultValue:"0.0F"|\
		primitive:"integer", prime:"int", Primitive:"Integer", Prime:"Int", legacy: true, defaultValue:"0"|\
		primitive:"long", prime:"long", Primitive:"Long", Prime:"Long", legacy: true, defaultValue:"0L"|\
		primitive:"short", prime:"short", Primitive:"Short", Prime:"Short", legacy: false, defaultValue:"0"

/*
 *	Copyright 2020 Cufy
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *	    http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 */
package cufy.util;

#ln 1
#if legacy
import cufy.util.function.#paste Prime#BiConsumer;
import cufy.util.function.#paste Prime#BiFunction;
import cufy.util.function.#paste Prime#ObjBiFunction;

import java.util.function.*;
#else
import cufy.util.function.*;

import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
#endif
#ln 1

/**
 * A map specialized for {@code #paste prime#} values. The map should implement (use)
 * {@link #paste Prime#Map.#paste Prime#Entry} on its entries.
 *
 * @author LSafer
 * @version 0.1.5
 * @since 0.1.5 ~2020.09.02
 */
public interface #paste Prime#Map
		extends
		PrimitiveMap<#paste Primitive#, #paste Primitive#, #paste Prime#BiConsumer, #paste Prime#BinaryOperator> {
	@Override
	default #paste Primitive# compute(#paste Primitive# key, BiFunction<? super #paste Primitive#, ? super #paste Primitive#, ? extends #paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		boolean[] notnull = new boolean[1];
		#ln
		#lt 1##paste prime# current = this.compute(
				key,
				(#paste prime# k, #paste Primitive# v) -> {
					#ln
					#lt 4##paste Primitive# newValue = (#paste Primitive#) (
							function instanceof #paste Prime#ObjBiFunction ?
							((#paste Prime#ObjBiFunction) function).apply(k, v) :
							function.apply(k, v)
					);
					notnull[0] = newValue != null;
					return newValue;
				}
		);
		return notnull[0] ?
			   current :
			   null;
	}

	@Override
	default #paste Primitive# computeIfAbsent(#paste Primitive# key, Function<? super #paste Primitive#, ? extends #paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		boolean[] notnull = new boolean[1];
		#ln
		#lt 1##paste prime# current = this.computeIfAbsent(
				key,
				(#paste prime# k) -> {
					#ln
					#lt 4##paste Primitive# newValue = (#paste Primitive#) (
							function instanceof #paste Prime#Function ?
							((#paste Prime#Function) function).apply(k) :
							function.apply(k)
					);
					notnull[0] = newValue != null;
					return newValue;
				}
		);
		return notnull[0] ?
			   current :
			   null;
	}

	@Override
	default #paste Primitive# computeIfPresent(#paste Primitive# key, BiFunction<? super #paste Primitive#, ? super #paste Primitive#, ? extends #paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		boolean[] notnull = {this.containsKey(key)};
		#ln
		#lt 1##paste prime# current = this.computeIfPresent(
				key,
				(#paste prime# k, #paste prime# v) -> {
					#ln
					#lt 4##paste Primitive# newValue = (#paste Primitive#) (
							function instanceof #paste Prime#BiFunction ?
							((#paste Prime#BiFunction) function).apply(k, v) :
							function.apply(k, v)
					);
					notnull[0] = newValue != null;
					return newValue;
				}
		);
		return notnull[0] ?
			   current :
			   null;
	}

	@Override
	default boolean containsKey(Object key) {
		return key instanceof #paste Primitive# && this.containsKey((#paste prime#) key);
	}

	@Override
	default boolean containsValue(Object value) {
		return value instanceof #paste Primitive# && this.containsValue((#paste prime#) value);
	}

	@Override
	default void forEach(BiConsumer<? super #paste Primitive#, ? super #paste Primitive#> consumer) {
		Objects.requireNonNull(consumer, "consumer");
		this.forEach(
				consumer instanceof #paste Prime#BiConsumer ?
				(#paste Prime#BiConsumer) consumer :
				consumer::accept
		);
	}

	@Override
	default #paste Primitive# get(Object key) {
		return key instanceof #paste Primitive# &&
			   this.containsKey((#paste prime#) key) ?
			   this.get#paste Prime#((#paste prime#) key) :
			   null;
	}

	@Override
	default #paste Primitive# getOrDefault(Object key, #paste Primitive# defaultValue) {
		//avoid using getOrDefault#paste Prime#, to allow the 'defaultValue' to be null
		return key instanceof #paste Primitive# &&
			   this.containsKey((#paste prime#) key) ?
			   this.get#paste Prime#((#paste prime#) key) :
			   defaultValue;
	}

	@Override
	default #paste Primitive# merge(#paste Primitive# key, #paste Primitive# value, BiFunction<? super #paste Primitive#, ? super #paste Primitive#, ? extends #paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		Objects.requireNonNull(value, "value");
		boolean[] notnull = {this.containsKey(key)};
		#ln
		#lt 1##paste prime# current = this.merge(
				key,
				value,
				(#paste prime# k, #paste prime# v) -> {
					#ln
					#lt 4##paste Primitive# newValue = (#paste Primitive#) (
							function instanceof #paste Prime#BiFunction ?
							((#paste Prime#BiFunction) function).apply(k, v) :
							function.apply(k, v)
					);
					notnull[0] = newValue != null;
					return newValue;
				}
		);
		return notnull[0] ?
			   current :
			   null;
	}

	@Override
	default #paste Primitive# put(#paste Primitive# key, #paste Primitive# value) {
		boolean notnull = this.containsKey((#paste prime#) key);
		#ln
		#lt 1##paste prime# old = this.put#paste Prime#(key, value);
		return notnull ?
			   old :
			   null;
	}

	@Override
	default #paste Primitive# putIfAbsent(#paste Primitive# key, #paste Primitive# value) {
		if (this.containsKey((#paste prime#) key))
			return this.get#paste Prime#(key);

		this.put#paste Prime#(key, value);
		return null;
	}

	@Override
	default #paste Primitive# remove(Object key) {
		return key instanceof #paste Primitive# &&
			   this.containsKey((#paste prime#) key) ?
			   this.remove#paste Prime#((#paste prime#) key) :
			   null;
	}

	@Override
	default boolean remove(Object key, Object value) {
		return key instanceof #paste Primitive# &&
			   value instanceof #paste Primitive# &&
			   this.remove#paste Prime#((#paste prime#) key, (#paste prime#) value);
	}

	@Override
	default #paste Primitive# replace(#paste Primitive# key, #paste Primitive# value) {
		return this.containsKey((#paste prime#) key) ?
			   this.replace#paste Prime#(key, value) :
			   null;
	}

	@Override
	default boolean replace(#paste Primitive# key, #paste Primitive# oldValue, #paste Primitive# newValue) {
		return this.replace#paste Prime#(key, oldValue, newValue);
	}

	@Override
	default void replaceAll(BiFunction<? super #paste Primitive#, ? super #paste Primitive#, ? extends #paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		this.replaceAll(
				function instanceof #paste Prime#BinaryOperator ?
				(#paste Prime#BinaryOperator) function :
				function::apply
		);
	}

	@Override
	#ln
	#lt##paste Prime#Set keySet();

	@Override
	#ln
	#lt##paste Prime#Collection values();

	/**
	 * Attempts to compute a mapping for the specified key and its current mapped value.
	 * <p>
	 * If the function returns {@code null}, the mapping is removed (or remains absent if initially
	 * absent). If the function itself throws an (unchecked) exception, the exception is rethrown,
	 * and the current mapping is left unchanged.
	 *
	 * @param key      key with which the specified value is to be associated.
	 * @param function the function to compute a value.
	 * @return the new value associated with the specified key, or {@code #paste defaultValue#} if
	 * 		none.
	 * @throws NullPointerException          if the given {@code function} is null.
	 * @throws UnsupportedOperationException if the {@code put} operation is not supported by this
	 *                                       map.
	 * @since 0.1.5 ~2020.09.03
	 */
	default #paste prime# compute(#paste prime# key, #paste Prime#ObjBiFunction<#paste Primitive#, #paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		boolean oldNotnull = this.containsKey(key);
		#ln
		#lt 1##paste Primitive# oldValue = oldNotnull ?
							 this.get#paste Prime#(key) :
							 null;
		#ln
		#lt 1##paste Primitive# newValue = function.apply(key, oldValue);

		if (newValue == null) {
			if (oldNotnull)
				this.remove#paste Prime#(key);

			return #paste defaultValue#;
		}

		this.put#paste Prime#(key, newValue);
		return newValue;
	}

	/**
	 * If the specified key is not already associated with a value, attempts to compute its value
	 * using the given mapping function and enters it into this map unless {@code null}.
	 * <p>
	 * If the function returns {@code null} no mapping is recorded. If the function itself throws an
	 * (unchecked) exception, the exception is rethrown, and no mapping is recorded.
	 *
	 * @param key      key with which the specified value is to be associated.
	 * @param function the function to compute a value
	 * @return the current (existing or computed) value associated with the specified key, or {@code #paste defaultValue#}
	           if the computed value is null.
	 * @throws UnsupportedOperationException if the {@code put} operation is not supported by this
	 *                                       map.
	 * @since 0.1.5 ~2020.09.03
	 */
	default #paste prime# computeIfAbsent(#paste prime# key, #paste Prime#Function<#paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		if (this.containsKey(key))
			return this.get#paste Prime#(key);

		#ln
		#lt 1##paste Primitive# newValue = function.apply(key);

		if (newValue == null)
			return #paste defaultValue#;

		this.put#paste Prime#(key, newValue);
		return newValue;
	}

	/**
	 * If the value for the specified key is present, attempts to compute a new mapping given the
	 * key and its current mapped value.
	 * <p>
	 * If the function returns {@code null}, the mapping is removed. If the function itself throws
	 * an (unchecked) exception, the exception is rethrown, and the current mapping is left
	 * unchanged.
	 *
	 * @param key      key with which the specified value is to be associated.
	 * @param function the function to compute a value.
	 * @return the new value associated with the specified key, or {@code #paste defaultValue#} if
	 * 		none.
	 * @throws NullPointerException          if the given {@code function} is null.
	 * @throws UnsupportedOperationException if the {@code put} operation is not supported by this
	 *                                       map.
	 * @since 0.1.5 ~2020.09.03
	 */
	default #paste prime# computeIfPresent(#paste prime# key, #paste Prime#BiFunction<#paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		if (this.containsKey(key)) {
			#ln
			#lt 2##paste prime# oldValue = this.get#paste Prime#(key);
			#ln
			#lt 2##paste Primitive# newValue = function.apply(key, oldValue);

			if (newValue == null) {
				this.remove#paste Prime#(key);
				return #paste defaultValue#;
			}

			this.put(key, newValue);
			return newValue;
		}

		return #paste defaultValue#;
	}

	/**
	 * Returns the value to which the specified key is mapped, or {@code #paste defaultValue#} if this map
	 * contains no mapping for the key.
	 *
	 * @param key          the key whose associated value is to be returned.
	 * @param defaultValue the default mapping of the key.
	 * @return the value to which the specified key is mapped, or {@code #paste defaultValue#} if this map
	 * 		contains no mapping for the key.
	 * @since 0.1.5 ~2020.09.03
	 */
	default #paste prime# get#paste Prime#OrDefault(#paste prime# key, #paste prime# defaultValue) {
		return this.containsKey(key) ?
			   this.get#paste Prime#(key) :
			   defaultValue;
	}

	/**
	 * If the specified key is not already associated with a value, associates it with the given
	 * value. Otherwise, replaces the associated value with the results of the given remapping
	 * function, or removes if the result is {@code null}.
	 * <p>
	 * If the function returns {@code null} the mapping is removed. If the function itself throws an
	 * (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged.
	 *
	 * @param key      key with which the resulting value is to be associated.
	 * @param value    the value to be merged with the existing value associated with the key or, if
	 *                 no existing value, to be associated with the key.
	 * @param function the function to recompute a value if present.
	 * @return the new value associated with the specified key, or {@code #paste defaultValue#} if no
	 * 		value is associated with the key.
	 * @throws UnsupportedOperationException if the {@code put} operation is not supported by this
	 *                                       map.
	 * @throws NullPointerException          if the given {@code function} is null.
	 * @since 0.1.5 ~2020.09.03
	 */
	default #paste prime# merge(#paste prime# key, #paste prime# value, #paste Prime#BiFunction<#paste Primitive#> function) {
		Objects.requireNonNull(function, "function");
		if (this.containsKey(key)) {
			#ln
			#lt 2##paste Primitive# newValue = function.apply(this.get#paste Prime#(key), value);

			if (newValue == null) {
				this.remove#paste Prime#(key);
				return #paste defaultValue#;
			}

			this.put#paste Prime#(key, newValue);
			return newValue;
		}

		this.put#paste Prime#(key, value);
		return #paste defaultValue#;
	}

	/**
	 * If the specified key is not already associated with a value, associates it with the given
	 * value and returns {@code #paste defaultValue#}, else returns the current value.
	 *
	 * @param key   key with which the specified value is to be associated.
	 * @param value value to be associated with the specified key.
	 * @return the previous value associated with the specified key, or {@code #paste defaultValue#}
	 * 		if there was no mapping for the key. (A {@code #paste defaultValue#} return can also indicate
	 * 		that the map previously associated {@code #paste defaultValue#} with the key.)
	 * @throws UnsupportedOperationException if the {@code put} operation is not supported by this
	 *                                       map.
	 * @throws IllegalArgumentException      if some property of the specified key or value prevents
	 *                                       it from being stored in this map.
	 * @since 0.1.5 ~2020.09.03
	 */
	default #paste prime# put#paste Prime#IfAbsent(#paste prime# key, #paste prime# value) {
		if (this.containsKey(key))
			return this.get#paste Prime#(key);

		this.put#paste Prime#(key, value);
		return #paste defaultValue#;
	}

	/**
	 * Removes the entry for the specified key only if it is currently mapped to the specified
	 * value.
	 *
	 * @param key   key with which the specified value is associated.
	 * @param value value expected to be associated with the specified key.
	 * @return {@code true} if the value was removed.
	 * @throws UnsupportedOperationException if the {@code remove} operation is not supported by
	 *                                       this map.
	 * @since 0.1.5 ~2020.09.03
	 */
	default boolean remove#paste Prime#(#paste prime# key, #paste prime# value) {
		if (this.containsKey(key)) {
			#ln
			#lt 2##paste prime# current = this.get#paste Prime#(key);

			if (current == value) {
				this.remove#paste Prime#(key);
				return true;
			}
		}

		return false;
	}

	/**
	 * Replaces the entry for the specified key only if it is currently mapped to some value.
	 *
	 * @param key   key with which the specified value is associated.
	 * @param value value to be associated with the specified key.
	 * @return the previous value associated with the specified key, or {@code #paste defaultValue#}
	 * 		if there was no mapping for the key. (A {@code #paste defaultValue#} return can also indicate
	 * 		that the map previously associated {@code #paste defaultValue#} with the key).
	 * @throws UnsupportedOperationException if the {@code put} operation is not supported by this
	 *                                       map.
	 * @throws IllegalArgumentException      if some property of the specified key or value prevents
	 *                                       it from being stored in this map.
	 * @since 0.1.5 ~2020.09.02
	 */
	default #paste prime# replace#paste Prime#(#paste prime# key, #paste prime# value) {
		return this.containsKey(key) ?
			   this.put#paste Prime#(key, value) :
			   #paste defaultValue#;
	}

	/**
	 * Replaces the entry for the specified key only if currently mapped to the specified value.
	 *
	 * @param key      key with which the specified value is associated.
	 * @param oldValue value expected to be associated with the specified key.
	 * @param newValue value to be associated with the specified key.
	 * @return {@code true} if the value was replaced.
	 * @throws UnsupportedOperationException if the {@code put} operation is not supported by this
	 *                                       map.
	 * @throws IllegalArgumentException      if some property of a specified key or value prevents
	 *                                       it from being stored in this map.
	 * @since 0.1.5 ~2020.09.03
	 */
	default boolean replace#paste Prime#(#paste prime# key, #paste prime# oldValue, #paste prime# newValue) {
		if (this.containsKey(key)) {
			#ln
			#lt 2##paste prime# current = this.get#paste Prime#(key);

			if (current == oldValue) {
				this.put#paste Prime#(key, newValue);
				return true;
			}
		}

		return false;
	}

	/**
	 * Returns {@code true} if this map contains a mapping for the specified key.
	 *
	 * @param key key whose presence in this map is to be tested.
	 * @return {@code true} if this map contains a mapping for the specified key.
	 * @since 0.1.5 ~2020.09.03
	 */
	boolean containsKey(#paste prime# key);

	/**
	 * Returns {@code true} if this map maps one or more keys to the specified value.
	 *
	 * @param value value whose presence in this map is to be tested.
	 * @return {@code true} if this map maps one or more keys to the specified value.
	 * @since 0.1.5 ~2020.09.03
	 */
	boolean containsValue(#paste prime# value);

	/**
	 * Returns the value to which the specified key is mapped, or {@code #paste defaultValue#} if this
	 * map contains no mapping for the key.
	 * <p>
	 * A return value of {@code #paste defaultValue#} does not <i>necessarily</i> indicate that the
	 * map contains no mapping for the key; it's also possible that the map explicitly maps the key
	 * to {@code #paste defaultValue#}. The {@link \#containsKey(#paste prime#) containsKey} operation may be
	 * used to distinguish these two cases.
	 *
	 * @param key the key whose associated value is to be returned.
	 * @return the value to which the specified key is mapped, or {@code #paste defaultValue#} if this
	 * 		map contains no mapping for the key.
	 * @since 0.1.5 ~2020.09.02
	 */
	#ln
	#lt##paste prime# get#paste Prime#(#paste prime# key);

	/**
	 * Associates the specified value with the specified key in this map (optional operation). If
	 * the map previously contained a mapping for the key, the old value is replaced by the
	 * specified value. (A map {@code m} is said to contain a mapping for a key <tt>k</tt> if and
	 * only if {@link \#containsKey(#paste prime#) m.containsKey(k)} would return {@code true}.).
	 *
	 * @param key   key with which the specified value is to be associated.
	 * @param value value to be associated with the specified key.
	 * @return the previous value associated with {@code key}, or {@code #paste defaultValue#} if
	 * 		there was no mapping for {@code key}.(A {@code #paste defaultValue#} return can also indicate
	 * 		that the map previously associated {@code #paste defaultValue#} with {@code key}).
	 * @throws UnsupportedOperationException if the {@code put} operation is not supported by this
	 *                                       map.
	 * @throws IllegalArgumentException      if some property of the specified key or value prevents
	 *                                       it from being stored in this map.
	 * @since 0.1.5 ~2020.09.02
	 */
	#ln
	#lt##paste prime# put#paste Prime#(#paste prime# key, #paste prime# value);

	/**
	 * Removes the mapping for a key from this map if it is present (optional operation).
	 * <p>
	 * Returns the value to which this map previously associated the key, or {@code #paste defaultValue#}
	 * if the map contained no mapping for the key.
	 * <p>
	 * A return value of {@code #paste defaultValue#} does not <i>necessarily</i> indicate that the
	 * map contained no mapping for the key; it's also possible that the map explicitly mapped the
	 * key to {@code #paste defaultValue#}.
	 * <p>
	 * The map will not contain a mapping for the specified key once the call returns.
	 *
	 * @param key key whose mapping is to be removed from the map.
	 * @return the previous value associated with {@code key}, or {@code #paste defaultValue#} if
	 * 		there was no mapping for {@code key}.
	 * @throws UnsupportedOperationException if the {@code remove} operation is not supported by
	 *                                       this map.
	 * @since 0.1.5 ~2020.09.03
	 */
	#ln
	#lt##paste prime# remove#paste Prime#(#paste prime# key);

	/**
	 * An entry specialized for {@code #paste prime#} values.
	 *
	 * @author LSafer
	 * @version 0.1.5
	 * @since 0.1.5 ~2020.09.02
	 */
	interface #paste Prime#Entry
			extends
			PrimitiveEntry<#paste Primitive#, #paste Primitive#> {
		@Override
		default #paste Primitive# getKey() {
			return this.get#paste Prime#Key();
		}

		@Override
		default #paste Primitive# getValue() {
			return this.get#paste Prime#Value();
		}

		@Override
		default #paste Primitive# setValue(#paste Primitive# value) {
			return this.set#paste Prime#Value(value);
		}

		/**
		 * Returns the key corresponding to this entry.
		 *
		 * @return the key corresponding to this entry
		 * @throws IllegalStateException implementations may, but are not required to, throw this
		 *                               exception if the entry has been removed from the backing
		 *                               map.
		 * @since 0.1.5 ~2020.09.02
		 */
		#ln
		#lt 1##paste prime# get#paste Prime#Key();

		/**
		 * Returns the value corresponding to this entry. If the mapping has been removed from the
		 * backing map (by the iterator's {@code remove} operation), the results of this call are
		 * undefined.
		 *
		 * @return the value corresponding to this entry.
		 * @throws IllegalStateException implementations may, but are not required to, throw this
		 *                               exception if the entry has been removed from the backing
		 *                               map.
		 * @since 0.1.5 ~2020.09.02
		 */
		#ln
		#lt 1##paste prime# get#paste Prime#Value();

		/**
		 * Replaces the value corresponding to this entry with the specified value (optional
		 * operation). (Writes through to the map.) The behavior of this call is undefined if the
		 * mapping has already been removed from the map (by the iterator's {@code remove}
		 * operation).
		 *
		 * @param value new value to be stored in this entry.
		 * @return old value corresponding to the entry.
		 * @throws UnsupportedOperationException if the {@code put} operation is not supported by
		 *                                       the backing map.
		 * @throws IllegalArgumentException      if some property of this value prevents it from
		 *                                       being stored in the backing map.
		 * @throws IllegalStateException         implementations may, but are not required to, throw
		 *                                       this exception if the entry has been removed from
		 *                                       the backing map.
		 * @since 0.1.5 ~2020.09.02
		 */
		#ln
		#lt 1##paste prime# set#paste Prime#Value(#paste prime# value);
	}
}
